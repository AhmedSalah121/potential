// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_DB_URL")
}

model User {
  id              String       @id @default(uuid())
  email           String       @unique
  first_name      String
  last_name       String
  role            Role     @default(MEMBER)
  gender          Gender
  age             Int
  phone           String?
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  seeking_partner Boolean      @default(false)
  preferred_time  WorkoutTime?
  is_trainer      Boolean      @default(false)
  hourly_rate     Float? // For trainers
  gym_id          String?

  gym             Gym?         @relation(fields: [gym_id], references: [id])
  // Buddy Partnerships
  initiatedPartnerships BuddyPartnership[] @relation("UserAInitiated")
  receivedPartnerships  BuddyPartnership[] @relation("UserBReceived")
}

model Gym {
  id        String   @id @default(uuid())
  name      String
  address   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  members User[]
}

enum MuscleGroup {
  CHEST
  BACK
  LEGS
  SHOULDERS
  ARMS
  CORE
}

enum WorkoutTime {
  MORNING
  AFTERNOON
  EVENING
  ANY
}

model MatchHistory {
  id          String   @id @default(uuid())
  userAId     String
  userBId     String
  dateMatched DateTime
  matchedBy   String // "system" or "manual"
}

enum Role {
  ADMIN
  TRAINER
  MEMBER
}

enum Gender {
  MALE
  FEMALE
}

enum PartnershipStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

model BuddyPartnership {
  id      String @id @default(uuid())
  sender_id String
  sender   User   @relation("UserAInitiated", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver_id String
  receiver   User   @relation("UserBReceived", fields: [receiver_id], references: [id], onDelete: Cascade)
  status      PartnershipStatus @default(PENDING)
  requested_at DateTime          @default(now())
  responded_at DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // This ensures userA cannot send multiple pending requests to userB.
  @@unique([sender_id, receiver_id], name: "SenderReceiverPair")
}
